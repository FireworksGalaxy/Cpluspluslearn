Read This lesson again:

==> Example of Using Constexpr
#include <iostream>

constexpr int greater(int x, int y) // now a constexpr function
{
    return (x > y ? x : y);
}

int main()
{
    constexpr int x{ 5 };
    constexpr int y{ 6 };

    // We'll explain why we use variable g here later in the lesson
    constexpr int g { greater(x, y) }; // will be evaluated at compile-time

    std::cout << g << " is greater!\n";

    return 0;
}

==> Constexpr functions allow us to write functions that may be evaluated at compile-time.

==> Example two: When Contexpr can compile:
consteval int goo(int c)    // c is not constexpr, and cannot be used in constant expressions
{
    return c;
}

constexpr int foo(int b)    // b is not constexpr, and cannot be used in constant expressions
{
    constexpr int b2 { b }; // compile error: constexpr variable requires constant expression initializer

    return goo(b);          // compile error: consteval function call requires constant expression argument
}

int main()
{
    constexpr int a { 5 };

    std::cout << foo(a); // okay: constant expression a can be used as argument to constexpr function foo()

    return 0;
}
==> 
Put another way, we can categorize the likelihood that a constexpr function will actually be evaluated at compile-time as follows:

Always (required by the standard):

Constexpr function is called where constant expression is required.
Constexpr function is called from other function being evaluated at compile-time.
Probably (there’s little reason not to):

Constexpr function is called where constant expression isn’t required, all arguments are constant expressions.
Possibly (if optimized under the as-if rule):

Constexpr function is called where constant expression isn’t required, some arguments are not constant expressions but their values are known at compile-time.
Never (not possible):

Constexpr function is called where constant expression isn’t required, some arguments have values that are not known at compile-time.

==>  Use consteval if you have a function that must run at compile-time for some reason (e.g. performance).
==> Unless you have a specific reason not to, a function that can be made constexpr generally should be made constexpr.



