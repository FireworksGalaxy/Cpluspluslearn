

Point ==>1: 
Operator	    Symbol	      Form	            Meaning
Conditional  	?:	          c ? x : y	        If conditional c is true then evaluate x, otherwise evaluate y

Point ==> 2:
greater = ((x > y) ? x : y);

Point ==> 3:

--> Parenthesize the entire conditional operator when used in a compound expression.
--> For readability, consider parenthesizing the condition if it contains any operators (other than the function call operator).

Example:
std::cout << ((x > y) ? x : y);  

Point ==> 4:
The type of the expressions must match or be convertible !
--> The type of the second and third operand must match.
--> The compiler must be able to find a way to convert one or both of the second and third operands to matching types. 
The conversion rules the compiler uses are fairly complex and may yield surprising results in some cases.

Point ==> 5:
#include <iostream>

int main()
{
    std::cout << (true ? 1 : 2) << '\n';    // okay: both operands have matching type int    ANS: 1

    std::cout << (false ? 1 : 2.2) << '\n'; // okay: int value 1 converted to double         ANS: 2.2 

    std::cout << (true ? -1 : 2u) << '\n';  // surprising result: -1 converted to unsigned int, result out of range  ANS: 4294967295

    return 0;
}


Point ==> 6:
#include <iostream>

int main()
{
    constexpr int x{ 5 };
    std::cout << ((x != 5) ? x : "x is 5"); // compile error: compiler can't find common type for constexpr int and C-style string literal

    return 0;
}

