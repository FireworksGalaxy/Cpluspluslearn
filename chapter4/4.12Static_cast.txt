Implicit type conversion
----------------------------------------------
#include <iostream>

void print(double x) // print takes a double parameter
{
	std::cout << x << '\n';
}

int main()
{
	int y { 5 };
	print(y); // y is of type int

	return 0;
}
-----------------------------------------------
-- In the above example, the conversion does not change variable y from type int to double. 
   Instead, the conversion uses the value of y (5) as input to create a new double value (5.0). This double value is then passed to function print.
-----------------------------------------------
int main()
{
    double d { 5 }; // okay: int to double is safe
    int x { 5.5 }; // error: double to int not safe

    return 0;
}
--------------------------------------------------------------------------------
                                Static_Cast
--------------------------------------------------------------------------------

--  Explicit type conversion allow us (the programmer) to explicitly tell the compiler to convert a value from one type to another type,
    and that we take full responsibility for the result of that conversion. If such a conversion results in the loss of value, the compiler will not warn us.
    To perform an explicit type conversion, in most cases weâ€™ll use the static_cast operator. The syntax for the static cast looks a little funny:

FORM:  static_cast<new_type>(expression)


---------------------
EXAMPLE 1
---------------------
#include <iostream>

void print(int x)
{
	std::cout << x << '\n';
}

int main()
{
	print( static_cast<int>(5.5) ); // explicitly convert double value 5.5 to an int

	return 0;
}
------------------------------
EXAMPLE 2
------------------------------

#include <iostream>

int main()
{
    unsigned int u { 5 };
    int s { static_cast<int>(u) }; // return value of variable u as an int

    std::cout << s << '\n';
    return 0;
}

-------------------------------


