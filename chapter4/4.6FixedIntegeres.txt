
-- Fixed-width integers, They can be accessed by including the <cstdint> header!

  Fixed-width integers
  Name	              Type	                  Range	                            Notes
  std::int8_t	        1 byte signed	          -128 to 127	                      Treated like a signed char on many systems. See note below.
  std::uint8_t      	1 byte unsigned	         0 to 255	                        Treated like an unsigned char on many systems. See note below.
  std::int16_t	      2 byte signed	          -32,768 to 32,767	
  std::uint16_t	      2 byte unsigned	         0 to 65,535	
  std::int32_t	      4 byte signed	          -2,147,483,648 to 2,147,483,647	
  std::uint32_t	      4 byte unsigned         	0 to 4,294,967,295	
  std::int64_t	      8 byte signed	          -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807	
  std::uint64_t	      8 byte unsigned	        0 to 18,446,744,073,709,551,615	


-- In most cases, we only instantiate a small number of int variables at a time, and these are typically destroyed at the end of the function in which they are created. 
   In such cases, wasting 2 bytes of memory per variable isn’t a concern (the limited range is a bigger issue).
   However, in cases where our program allocates thousands or millions of int variables,
   wasting 2 bytes of memory per variable can have a significant impact on the program’s overall memory usage.


-- Fast and least integers
   1. The fast types (std::int_fast#_t and std::uint_fast#_t) provide the fastest signed/unsigned integer type with a width of at least # bits (where # = 8, 16, 32, or 64).
   For example, std::int_fast32_t will give you the fastest signed integer type that’s at least 32 bits.
   By fastest, we mean the integral type that can be processed most quickly by the CPU.

   2. The least types (std::int_least#_t and std::uint_least#_t) provide the smallest signed/unsigned integer type with a width of at least # bits (where # = 8, 16, 32, or 64). 
   For example, std::uint_least32_t will give you the smallest unsigned integer type that’s at least 32 bits.

   
-- However, these fast and least integers have their own downsides: First, not many programmers actually use them, and a lack of familiarity can lead to errors. 
   Second, the fast types can lead to memory wastage, as their actual size may be larger than indicated by their name.   

---------------------------------------------------------------------------
-- std::int8_t and std::uint8_t likely behave like chars instead of integers
-- The 8-bit fixed-width integer types are often treated like chars instead of integer values (and this may vary per system). Prefer the 16-bit fixed integral types for most cases.
-- When storing integral values where a specific size is important, it’s generally best to avoid std::int8_t and std::uint8_t (and the related fast and least types) and use std::int16_t or std::uint16_t instead.

  1. Prefer int when the size of the integer doesn’t matter (e.g. the number will always fit within the range of a 2-byte signed integer) and
  the variable is short-lived (e.g. destroyed at the end of the function). For example, if you’re asking the user to enter their age, or counting from 1 to 10,
  it doesn’t matter whether int is 16 or 32 bits (the numbers will fit either way). This will cover the vast majority of the cases you’re likely to run across.
  
  2. Prefer std::int#_t when storing a quantity that needs a guaranteed range.

  3. Prefer std::uint#_t when doing bit manipulation or where well-defined wrap-around behavior is required.
  
  Avoid the following when possible:
    1. short and long integers -- use a fixed-width type instead.
    2. Unsigned types for holding quantities.
    3. The 8-bit fixed-width integer types.
    4. The fast and least fixed-width types.
    5. Any compiler-specific fixed-width integers -- for example, Visual Studio defines __int8, __int16, etc…
-----------------------------------------------------------------------------

-- Pretty simple, right? We can infer that operator sizeof returns an integer value -- but what integral type is that return value? An int? A short? 
   The answer is that sizeof returns a value of type std::size_t. std::size_t is defined as an implementation-defined unsigned integral type.

   std::size_t is defined in a number of different headers. <cstddef> is the best one to include, as it contains the least number of other defined identifiers.

    size_t is the type of the return in default cpp functions in simple words!

    ----------------------------------------------------------------
   
   
