
- Header guard: 

When this header is #included, the preprocessor checks whether SOME_UNIQUE_NAME_HERE has been previously defined.
If this is the first time we’re including the header, SOME_UNIQUE_NAME_HERE will not have been defined. Consequently, 
it #defines SOME_UNIQUE_NAME_HERE and includes the contents of the file. If the header is included again into the same file,
SOME_UNIQUE_NAME_HERE will already have been defined from the first time the contents of the header were included, 
and the contents of the header will be ignored (thanks to the #ifndef).

EXAMPLE:
#ifndef SOME_UNIQUE_NAME_HERE
#define SOME_UNIQUE_NAME_HERE

// your declarations (and certain types of definitions) here

#endif


2. #Progma once
#pragma once serves the same purpose as header guards: to avoid a header file from being included multiple times. 
With traditional header guards, the developer is responsible for guarding the header (by using preprocessor directives #ifndef, #define, and #endif).
With #pragma once, we’re requesting that the compiler guard the header. How exactly it does this is an implementation-specific detail.

===> #pragma once, do not expect a pragma that works on one compiler to be supported by another.
     Because #pragma once is not defined by the C++ standard, it is possible that some compilers may not implement it
