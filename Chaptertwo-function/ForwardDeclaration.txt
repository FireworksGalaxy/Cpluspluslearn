
1. To write a forward declaration for a function, we use a function declaration statement (also called a function prototype). 
The function declaration consists of the function’s return type, name, and parameter types, terminated with a semicolon. 
The names of the parameters can be optionally included. The function body is not included in the declaration.

 int add(int x, int y); // function declaration includes return type, name, parameters, and semicolon.  No function body!
 int add(int, int);     // Also valid function declaration == function prototype
2. An Example:
#include <iostream>

int add(int x, int y); // forward declaration of add() (using a function declaration)

int main()
{
    std::cout << "The sum of 3 and 4 is: " << add(3, 4) << '\n'; // this works because we forward declared add() above
    return 0;
}

int add(int x, int y) // even though the body of add() isn't defined until here
{
    return x + y;
}

3. New programmers often wonder what happens if they forward declare a function but do not define it.
However, if a forward declaration is made and the function is called, but the program never defines the function,
the program will compile okay, but the linker will complain that it can’t resolve the function call.

  4. Declarations vs. definitions

In C++, you’ll frequently hear the words “declaration” and “definition” used, and often interchangeably. What do they mean? 
  You now have enough fundamental knowledge to understand the difference between the two.

==> A declaration tells the compiler about the existence of an identifier and its associated type information. 
  
   @@Here are some examples of declarations:

int add(int x, int y); // tells the compiler about a function named "add" that takes two int parameters and returns an int.  No body! 
int x;                 // tells the compiler about an integer variable named x

==> A definition is a declaration that actually implements (for functions and types) or instantiates (for variables) the identifier.
 
  @@Here are some examples of definitions:
  
int add(int x, int y) // implements function add()
{
    int z{ x + y };   // instantiates variable z

    return z;
}

int x;                // instantiates variable x

In C++, all definitions are declarations. Therefore int x; is both a definition and a declaration.

  5. 
  
Term	                                  Technical Meaning	                                                                  Examples
Declaration	                            Tells compiler about an identifier and its associated type information.	            void foo(); // function forward declaration (no body)
                                                                                                                            void goo() {}; // function definition (has body)
                                                                                                                            int x; // variable definition
Definition	                            Implements a function or instantiates a variable.
                                        Definitions are also declarations.	                                                void foo() { } // function definition (has body)
                                                                                                                            int x; // variable definition

Pure declaration	                      A declaration that isn’t a definition.	                                            void foo(); // function forward declaration (no body)
Initialization	                        Provides an initial value for a defined object.	                                    int x { 2 }; // 2 is the initializer

  
